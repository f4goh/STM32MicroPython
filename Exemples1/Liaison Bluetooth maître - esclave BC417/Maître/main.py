# Objet du script : Réception de la valeur d'un potentiomètre par une liaison Bluetooth et# commande de l'angle d'un servomoteur en conséquence. # Ce script est paramétré (UART_NUMBER, BAUDRATE, EOL) pour la communication avec un module# Bluetooth HC-05 connecté à une carte NUCLEO-WB55.import pybfrom machine import UARTfrom time import sleep_ms# Constantes relatives au paramétrage de l'UARTDELAY_TIMEOUT = const(10000) # Durée (en millisecondes) pendant laquelle l'UART attend de reçevoir un messageBAUDRATE = const(9600)	# Débit, en bauds, de la communication sérieUART_NUMBER = const(2)	# Identifiant de l'UART de la carte NUCLEO-WB55 qui sera utiliséRX_BUFF = const(512)	# Taille du buffer de réception (les messages reçus seront tronqués 						# à ce nombre de caractères)# Servomoteur sur D6d6 = pyb.Pin('D6', pyb.Pin.OUT_PP)tim_d6 = pyb.Timer(1, freq=50)pwm_d6 = tim_d6.channel(1, pyb.Timer.PWM, pin=d6)# Convertit l'ange de rotation (en entrée) en une valeur de PWM puis l'envoie au servo.@micropython.native # Optimise le bytecode pour STM32def setServoAngle(timer, angle):	if (angle >= 0 and angle <= 180):		pw_percent = 3 + angle * (12.5 - 3) / 180		timer.pulse_width_percent(pw_percent)	else:		raise ValueError("La commande d'angle du servomoteur doit être comprise entre 0° et 180°")# Fonction pour remapper un intervalle de valeurs dans un autre@micropython.native # Optimise le bytecode pour STM32def map (value, from_min, from_max, to_min, to_max):	return (value-from_min) * (to_max-to_min) / (from_max-from_min) + to_minEOL = "\r\n" # Terminaison de commande pour valider l'envoi# Initialisation de l'UARTuart = UART(UART_NUMBER, BAUDRATE, timeout = DELAY_TIMEOUT, bits=8, parity=None, stop=1, rxbuf = RX_BUFF)print("Module maître (servomoteur)")while True:	try:			message_content = uart.readline()			decoded_msg = message_content.decode("utf-8").strip()				#print("Valeur du potentiomètre : " + decoded_msg)			# Convertit la lecture analogique du potentiomètre en un angle entre 0° et 180°		angle = int(map(int(decoded_msg), 0, 4095, 0, 180))								# Applique cet angle au servomoteur		setServoAngle(pwm_d6, angle)				except ValueError:			print("Mesure du potentiomètre erronée" ) 