# Objet du script : Transmission de la valeur d'un potentiomètre par une liaison Bluetooth.# Ce script est paramétré (UART_NUMBER, BAUDRATE, EOL) pour la communication avec un module# Bluetooth HC-05 connecté à une carte NUCLEO-WB55.import pybfrom machine import UARTimport gc # Ramasse miettes, pour éviter de saturer la mémoire from time import sleep_ms# Constantes relatives au paramétrage de l'UARTDELAY_TIMEOUT = const(1000) # Durée (en millisecondes) pendant laquelle l'UART attend de reçevoir un messageBAUDRATE = const(9600)	# Débit, en bauds, de la communication sérieUART_NUMBER = const(2)	# Identifiant de l'UART de la carte NUCLEO-WB55 qui sera utiliséRX_BUFF = const(512)	# Taille du buffer de réception (les messages reçus seront tronqués 						# à ce nombre de caractères)						# Potentiomètre branché sur A0a0 = pyb.ADC('A0')EOL = "\r\n" # Terminaison de commande pour valider l'envoi# Initialisation de l'UARTuart = UART(UART_NUMBER, BAUDRATE, rxbuf = RX_BUFF)# Fonction de service de l'interruption de réception de l'UARTdef Reception(uart_object):		# Lecture des caractères reçus	message_received = uart_object.readline()	# Si réception d'un message	if not (message_received is None):		# Affiche le message reçu		decoded_msg = message_received.decode("utf-8").strip()		print("Message reçu : " + decoded_msg)# On active l'interruption de l'UART (vecteur d'interruption) pour la réceptionirq_uart = uart.irq(Reception, UART.IRQ_RXIDLE, False)print("Module esclave (potentiomètre)")while True:		# Lecture et numérisation de la valeur du potentiomètre	adc_read = a0.read()		str_adc_read = str(adc_read)		# Message de débug, commenté compte tenu de la haute fréquence de	# lecturedu potentiomètre.	#print("Message envoyé : " + str_adc_read)		# Envoi de la valeur du  potentiomètre au module HC-05 maître	uart.write(str_adc_read + EOL)		# Temporisation de 50 ms	sleep_ms(50)