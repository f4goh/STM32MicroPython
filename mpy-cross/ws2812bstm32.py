import gc
try:
    import pyb
except ImportError:
    import machine as pyb
from machine import disable_irq
from machine import enable_irq

#define WS2812B_SPI_DIVISOR SPI_CLOCK_DIV32 // 500ns [0x06]

class WS2812:
	"""
	Driver for WS2812 RGB LEDs. May be used for controlling single LED or chain
	of LEDs.
	Example of use:
		chain = WS2812(spi_bus=1, led_count=4)
		data = [
			(255, 0, 0),	# red
			(0, 255, 0),	# green
			(0, 0, 255),	# blue
			(85, 85, 85),   # white
		]
		chain.show(data)
	Version: 1.0
	"""
	buf_bytes = (0b000010001, 0b00010011, 0b00110001, 0b00110011)

	# New version uses one large LUT as its faster index into sequential bytes for the GRB pattern
	# encoderLookup[256*3]
	encoderLookup=[0x92,0x49,0x24,0x92,0x49,0x26,0x92,0x49,0x34,
		0x92,0x49,0x36,0x92,0x49,0xA4,0x92,0x49,0xA6,
		0x92,0x49,0xB4,0x92,0x49,0xB6,0x92,0x4D,0x24,
		0x92,0x4D,0x26,0x92,0x4D,0x34,0x92,0x4D,0x36,
		0x92,0x4D,0xA4,0x92,0x4D,0xA6,0x92,0x4D,0xB4,
		0x92,0x4D,0xB6,0x92,0x69,0x24,0x92,0x69,0x26,
		0x92,0x69,0x34,0x92,0x69,0x36,0x92,0x69,0xA4,
		0x92,0x69,0xA6,0x92,0x69,0xB4,0x92,0x69,0xB6,
		0x92,0x6D,0x24,0x92,0x6D,0x26,0x92,0x6D,0x34,
		0x92,0x6D,0x36,0x92,0x6D,0xA4,0x92,0x6D,0xA6,
		0x92,0x6D,0xB4,0x92,0x6D,0xB6,0x93,0x49,0x24,
		0x93,0x49,0x26,0x93,0x49,0x34,0x93,0x49,0x36,
		0x93,0x49,0xA4,0x93,0x49,0xA6,0x93,0x49,0xB4,
		0x93,0x49,0xB6,0x93,0x4D,0x24,0x93,0x4D,0x26,
		0x93,0x4D,0x34,0x93,0x4D,0x36,0x93,0x4D,0xA4,
		0x93,0x4D,0xA6,0x93,0x4D,0xB4,0x93,0x4D,0xB6,
		0x93,0x69,0x24,0x93,0x69,0x26,0x93,0x69,0x34,
		0x93,0x69,0x36,0x93,0x69,0xA4,0x93,0x69,0xA6,
		0x93,0x69,0xB4,0x93,0x69,0xB6,0x93,0x6D,0x24,
		0x93,0x6D,0x26,0x93,0x6D,0x34,0x93,0x6D,0x36,
		0x93,0x6D,0xA4,0x93,0x6D,0xA6,0x93,0x6D,0xB4,
		0x93,0x6D,0xB6,0x9A,0x49,0x24,0x9A,0x49,0x26,
		0x9A,0x49,0x34,0x9A,0x49,0x36,0x9A,0x49,0xA4,
		0x9A,0x49,0xA6,0x9A,0x49,0xB4,0x9A,0x49,0xB6,
		0x9A,0x4D,0x24,0x9A,0x4D,0x26,0x9A,0x4D,0x34,
		0x9A,0x4D,0x36,0x9A,0x4D,0xA4,0x9A,0x4D,0xA6,
		0x9A,0x4D,0xB4,0x9A,0x4D,0xB6,0x9A,0x69,0x24,
		0x9A,0x69,0x26,0x9A,0x69,0x34,0x9A,0x69,0x36,
		0x9A,0x69,0xA4,0x9A,0x69,0xA6,0x9A,0x69,0xB4,
		0x9A,0x69,0xB6,0x9A,0x6D,0x24,0x9A,0x6D,0x26,
		0x9A,0x6D,0x34,0x9A,0x6D,0x36,0x9A,0x6D,0xA4,
		0x9A,0x6D,0xA6,0x9A,0x6D,0xB4,0x9A,0x6D,0xB6,
		0x9B,0x49,0x24,0x9B,0x49,0x26,0x9B,0x49,0x34,
		0x9B,0x49,0x36,0x9B,0x49,0xA4,0x9B,0x49,0xA6,
		0x9B,0x49,0xB4,0x9B,0x49,0xB6,0x9B,0x4D,0x24,
		0x9B,0x4D,0x26,0x9B,0x4D,0x34,0x9B,0x4D,0x36,
		0x9B,0x4D,0xA4,0x9B,0x4D,0xA6,0x9B,0x4D,0xB4,
		0x9B,0x4D,0xB6,0x9B,0x69,0x24,0x9B,0x69,0x26,
		0x9B,0x69,0x34,0x9B,0x69,0x36,0x9B,0x69,0xA4,
		0x9B,0x69,0xA6,0x9B,0x69,0xB4,0x9B,0x69,0xB6,
		0x9B,0x6D,0x24,0x9B,0x6D,0x26,0x9B,0x6D,0x34,
		0x9B,0x6D,0x36,0x9B,0x6D,0xA4,0x9B,0x6D,0xA6,
		0x9B,0x6D,0xB4,0x9B,0x6D,0xB6,0xD2,0x49,0x24,
		0xD2,0x49,0x26,0xD2,0x49,0x34,0xD2,0x49,0x36,
		0xD2,0x49,0xA4,0xD2,0x49,0xA6,0xD2,0x49,0xB4,
		0xD2,0x49,0xB6,0xD2,0x4D,0x24,0xD2,0x4D,0x26,
		0xD2,0x4D,0x34,0xD2,0x4D,0x36,0xD2,0x4D,0xA4,
		0xD2,0x4D,0xA6,0xD2,0x4D,0xB4,0xD2,0x4D,0xB6,
		0xD2,0x69,0x24,0xD2,0x69,0x26,0xD2,0x69,0x34,
		0xD2,0x69,0x36,0xD2,0x69,0xA4,0xD2,0x69,0xA6,
		0xD2,0x69,0xB4,0xD2,0x69,0xB6,0xD2,0x6D,0x24,
		0xD2,0x6D,0x26,0xD2,0x6D,0x34,0xD2,0x6D,0x36,
		0xD2,0x6D,0xA4,0xD2,0x6D,0xA6,0xD2,0x6D,0xB4,
		0xD2,0x6D,0xB6,0xD3,0x49,0x24,0xD3,0x49,0x26,
		0xD3,0x49,0x34,0xD3,0x49,0x36,0xD3,0x49,0xA4,
		0xD3,0x49,0xA6,0xD3,0x49,0xB4,0xD3,0x49,0xB6,
		0xD3,0x4D,0x24,0xD3,0x4D,0x26,0xD3,0x4D,0x34,
		0xD3,0x4D,0x36,0xD3,0x4D,0xA4,0xD3,0x4D,0xA6,
		0xD3,0x4D,0xB4,0xD3,0x4D,0xB6,0xD3,0x69,0x24,
		0xD3,0x69,0x26,0xD3,0x69,0x34,0xD3,0x69,0x36,
		0xD3,0x69,0xA4,0xD3,0x69,0xA6,0xD3,0x69,0xB4,
		0xD3,0x69,0xB6,0xD3,0x6D,0x24,0xD3,0x6D,0x26,
		0xD3,0x6D,0x34,0xD3,0x6D,0x36,0xD3,0x6D,0xA4,
		0xD3,0x6D,0xA6,0xD3,0x6D,0xB4,0xD3,0x6D,0xB6,
		0xDA,0x49,0x24,0xDA,0x49,0x26,0xDA,0x49,0x34,
		0xDA,0x49,0x36,0xDA,0x49,0xA4,0xDA,0x49,0xA6,
		0xDA,0x49,0xB4,0xDA,0x49,0xB6,0xDA,0x4D,0x24,
		0xDA,0x4D,0x26,0xDA,0x4D,0x34,0xDA,0x4D,0x36,
		0xDA,0x4D,0xA4,0xDA,0x4D,0xA6,0xDA,0x4D,0xB4,
		0xDA,0x4D,0xB6,0xDA,0x69,0x24,0xDA,0x69,0x26,
		0xDA,0x69,0x34,0xDA,0x69,0x36,0xDA,0x69,0xA4,
		0xDA,0x69,0xA6,0xDA,0x69,0xB4,0xDA,0x69,0xB6,
		0xDA,0x6D,0x24,0xDA,0x6D,0x26,0xDA,0x6D,0x34,
		0xDA,0x6D,0x36,0xDA,0x6D,0xA4,0xDA,0x6D,0xA6,
		0xDA,0x6D,0xB4,0xDA,0x6D,0xB6,0xDB,0x49,0x24,
		0xDB,0x49,0x26,0xDB,0x49,0x34,0xDB,0x49,0x36,
		0xDB,0x49,0xA4,0xDB,0x49,0xA6,0xDB,0x49,0xB4,
		0xDB,0x49,0xB6,0xDB,0x4D,0x24,0xDB,0x4D,0x26,
		0xDB,0x4D,0x34,0xDB,0x4D,0x36,0xDB,0x4D,0xA4,
		0xDB,0x4D,0xA6,0xDB,0x4D,0xB4,0xDB,0x4D,0xB6,
		0xDB,0x69,0x24,0xDB,0x69,0x26,0xDB,0x69,0x34,
		0xDB,0x69,0x36,0xDB,0x69,0xA4,0xDB,0x69,0xA6,
		0xDB,0x69,0xB4,0xDB,0x69,0xB6,0xDB,0x6D,0x24,
		0xDB,0x6D,0x26,0xDB,0x6D,0x34,0xDB,0x6D,0x36,
		0xDB,0x6D,0xA4,0xDB,0x6D,0xA6,0xDB,0x6D,0xB4,
		0xDB,0x6D,0xB6]

	def __init__(self, spi_bus=0, ledNumber=1, intensity=1):
		"""
		Params:
		* spi_bus = SPI bus ID (1 or 2)
		* led_count = count of LEDs
		* intensity = light intensity (float up to 1)
		"""
		self.led_count = ledNumber
		self.intensity = intensity

		# prepare SPI data buffer (9 encoded bytes per pixel)
		# 1 byte empty peamble to fix issue with SPI MOSI and on byte at the end to clear down MOSI
		self.buf_length = (self.led_count << 3) + self.led_count + 2
		self.buf = bytearray(self.buf_length)
		self.buf[0] = 0
		self.buf[self.buf_length-1] = 0
		# SPI init
		self.spi = pyb.SPI(spi_bus, pyb.SPI.MASTER, baudrate=4000000, polarity=0, phase=1)

		# turn LEDs off
		self.send_buf()

	def send_buf(self):
		"""
		Send buffer over SPI.
		"""
		disable_irq()
		self.spi.write(self.buf)
		enable_irq()

	# NOTE: show(), update_buf() and fill_buf() were replaced
	#       with these to reduce memory usage in pycomhal.py
	def clear(self):
		# turn off the rest of the LEDs
		buf = self.buf
		for index in range(0, self.led_count):
			self.clean(index)

	def clean(self, addr):
		self.put_pixel(addr, 0, 0, 0)
#         index = (addr << 3) + addr + 1
#         self.buf[index] = 0x00
#         self.buf[index+1] = 0x00
#         self.buf[index+2] = 0x00

#         self.buf[index+3] = 0x00
#         self.buf[index+4] = 0x00
#         self.buf[index+5] = 0x00

#         self.buf[index+6] = 0x00
#         self.buf[index+7] = 0x00
#         self.buf[index+8] = 0x00

	def put_pixel(self, addr, red, green, blue):
		buf = self.buf
		index = (addr << 3) + addr + 1
		#print("DEBUG: %d " % addr, [red, green, blue], [r, g, b])
		g = int(green * self.intensity)
		r = int(red * self.intensity)
		b = int(blue * self.intensity)

		buf[index] = self.encoderLookup[g*2 + g]
		buf[index+1] = self.encoderLookup[g*2 + g + 1]
		buf[index+2] = self.encoderLookup[g*2 + g + 2]
		buf[index+3] = self.encoderLookup[r*2 + r]
		buf[index+4] = self.encoderLookup[r*2 + r+1]
		buf[index+5] = self.encoderLookup[r*2 + r+2]
		buf[index+6] = self.encoderLookup[b*2 + b]
		buf[index+7] = self.encoderLookup[b*2 + b+1]
		buf[index+8] = self.encoderLookup[b*2 + b+2]
